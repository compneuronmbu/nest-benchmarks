%%% PARAMETER SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% define all relevant parameters: changes should be made here
% all data is placed in the userdict dictionary

% call like:
% nest --userargs=scale,nvp,simtime hpc_benchmark.sli

/user_scale statusdict/userargs :: 0 get (_) breakup 0 get double def
/user_nvp statusdict/userargs :: 0 get (_) breakup 1 get int def
/user_simtime statusdict/userargs :: 0 get (_) breakup 2 get double def

(GIT: ) =only statusdict/rcsinfo :: ==

(user_scale  : ) =only user_scale ==
(user_nvp    : ) =only user_nvp ==
(user_simtime: ) =only user_simtime ==

/nvp user_nvp def % total number of virtual processes
/scale user_scale def %  scaling factor of the network size, total network size = scale*11250 neurons
/simtime user_simtime def
/plastic false def
/d_min 1.5 def
/d_max 1.5 def

/inisimtime 10. ms def  % initial simulation time: calibration etc
/presimtime 90. ms def  % simulation time until reaching equilibrium
/dt 0.1 ms def          % simulation step
/path_name (.) def      % path where all files will have to be written
/record_spikes true def % record excitatory spikes 

% -------------------------------------------------------------------------------------

/brunel_params
<<
  /NE 9000 scale mul round cvi   % number of excitatory neurons
  /NI 2250 scale mul round cvi   % number of inhibitory neurons
  /Tot 9000 scale mul round cvi 2250 scale mul round cvi add

  /filestem path_name

>> def

% Here we resolve parameter dependencies, by making the independent
% values visible
brunel_params dup using

%%% FUNCTION SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/BuildNetwork
{
  
  tic % start timer on construction

  /master_seed 3284055 def

  % set global kernel parameters
  0
  <<
    /total_num_virtual_procs nvp
    /resolution  dt
    /overwrite_files true
    %/sort_connections_by_source false
    %/rng_seeds master_seed [0 nvp 1 sub] add Range % local RNG seeds
    %/grng_seed master_seed                         % global RNG seed
  >> SetStatus

  0 GetStatus /rng_seeds get ==
  0 GetStatus /grng_seed get ==


  M_INFO (BuildNetwork)
  (Creating source parrot.) message  % show message
  /source_parrot /parrot_neuron 1 Create def


  M_INFO (BuildNetwork)
  (Creating target parrot population.) message  % show message
  /parrot_neuron [Tot] LayoutNetwork /T_net Set  % subnet gets own gid
  /T_from T_net 1 add def                    % gid of first child
  /T_to T_from Tot add 1 sub def              % gid of last child

  T_from ==
  T_to ==

  %M_INFO (BuildNetwork)
  %(Creating source parrot.) message  % show message
  %/source_parrot /parrot_neuron 1 Create def

  /S_neurons source_parrot source_parrot cvgidcollection def % get memory efficient gid-collection

  /T_neurons T_from T_to cvgidcollection def % get memory efficient gid-collection

  S_neurons ==
  T_neurons ==

  /N T_neurons size S_neurons size add def

  scale 10 geq
  {
    /CE 9000 def %number of incoming excitatory connections
    /CI 2250 def %number of incomining inhibitory connections    
  }
  { % small networks: 10% connectivity
    /CE NE 0.1 mul iround def %number of incoming excitatory connections
    /CI NI 0.1 mul iround def %number of incomining inhibitory connections  
    /CT Tot 0.1 mul iround def  
  } ifelse




  M_INFO (BuildNetwork)
  (Creating excitatory stimulus generator.) message

  /S_stimulus /poisson_generator Create def
  S_stimulus
  <<
      /rate 200.
  >> SetStatus

  %inisimtime presimtime add simtime add ==

  %/S_stimulus /spike_generator Create def
  %S_stimulus
  %<<
  %    /spike_times [1. inisimtime presimtime add simtime cvd add 10 mul] Range 10. div
  %>> SetStatus

  M_INFO (BuildNetwork)
  (Creating excitatory spike detector.) message

  record_spikes
  {
    /detector_label  filestem (/alpha_) join (_spikes) join def
    /T_detector /spike_detector Create def
    T_detector
    <<
       /withtime true
       /to_file true
       /label detector_label
    >> SetStatus
  } if

  toc /BuildNodeTime Set

  BuildNodeTime cvs ( # build_time_nodes) join logger /log call

  memory_thisjob cvs ( # virt_mem_after_nodes) join logger /log call

  tic    % Start timer for connection time

  M_INFO (BuildNetwork)
  (Connecting stimulus generators.) message

  % Connect Poisson generator to neuron
  S_stimulus S_stimulus cvgidcollection S_neurons << /rule (all_to_all) >> << /model /static_synapse >> Connect
  %S_stimulus S_stimulus cvgidcollection T_neurons << /rule (all_to_all) >> << /model /static_synapse >> Connect



  M_INFO (BuildNetwork)
  (Connecting source -> target population.) message

  S_neurons T_neurons << /rule (all_to_all) >>
                      << /model /static_synapse >> Connect

  record_spikes true eq
  {
    M_INFO (BuildNetwork)
    (Connecting spike detectors.) message

    T_neurons T_detector T_detector cvgidcollection Connect
    %S_neurons T_detector T_detector cvgidcollection Connect
  } if

  false
  {
    M_INFO (BuildNetwork)
    (Creating and connecting external nodes) message
    /iaf_psc_alpha [10000] LayoutNetwork /extra_net Set  % subnet gets own gid
    /Extra_from extra_net 1 add def                     % gid of first child
    /Extra_to Extra_from 10000 add 1 sub def             % gid of last child
  } if

  /Extra_neurons Extra_from Extra_to cvgidcollection def % get memory efficient gid-collection

  Extra_neurons Extra_neurons Connect

  % read out time used for building
  toc /BuildEdgeTime Set
  BuildEdgeTime cvs ( # build_edge_time ) join logger /log call
  memory_thisjob cvs ( # virt_mem_after_edges) join logger /log call

} def % end of buildnetwork


/RunSimulation
{

  % initialize logger
  logger /init call

  ResetKernel

  memory_thisjob cvs ( # virt_mem_0) join logger /log call

  % - Network Construction ----------------------------------

  BuildNetwork

  % - Initial simulation: rig and calibrate -----------------
  
  tic

  Prepare
  inisimtime Run

  toc /InitializationTime Set

  memory_thisjob cvs ( # virt_mem_after_init) join logger /log call
  InitializationTime cvs ( # init_time) join logger /log call

  % - Presimulation: equilibrate system -----------------

  tic
  
  presimtime Run

  toc /PresimTime Set

  memory_thisjob cvs ( # virt_mem_after_presim) join logger /log call
  PresimTime cvs ( # presim_time) join logger /log call

  % - Simulation -----------------

  tic

  simtime Run

  toc /SimCPUTime Set

  memory_thisjob cvs ( # virt_mem_after_sim) join logger /log call
  SimCPUTime cvs ( # sim_time) join logger /log call

  % - Cleanup and output -----------

  Cleanup
  
  record_spikes true eq
  {
    T_detector ComputeRate cvs ( # average rate) join logger /log call
  } if

  T_neurons size S_neurons size add cvs ( # num_neurons) join logger /log call
  0 /num_connections get cvs ( # num_connections) join logger /log call
  0 /min_delay get cvs ( # min_delay) join logger /log call
  0 /max_delay get cvs ( # max_delay) join logger /log call
  0 /local_spike_counter get cvs ( # local_spike_counter) join logger /log call

  logger /done call
  
} def

% ------------------------------------------------------------------------------------

% Take spike detector, find total number of spikes registered,
% return average rate per neuron in Hz.
% NOTE: If you are running with several MPI processes, this
%       function only gives an approximation to the true rate.
%
% spike_det ComputeRate -> rate
/ComputeRate
{
  << >> begin  % anonymous dictionary for local variables

    /sdet Set

    % We need to guess how many neurons we record from.
    % This assumes an even distribution of nodes across
    % processes, as well as homogeneous activity in the
    % network. So this is really a hack. NEST needs better
    % support for rate calculations, such as giving the
    % number of neurons recorded from by each spike detector.

    %/n_local_neurons Nrec cvd NumProcesses div def
    %/divisor Nrec simtime mul def
    /divisor Tot simtime mul def
    divisor 0 gt
    {
      sdet /n_events get divisor div
      1000 mul         % convert from mHz to Hz, leave on stack
    }
    {
      (NaN) double   % no rate if nothing recorded
    }
    ifelse

  end
} bind             % optional, improves performance
def

% ------------------------------------------------------------------------------------

/*
    This function defines a logger class used to properly log memory and timing
    information from network simulations. It is used by hpc_benchmark.sli to
    store the information to the log files.
*/

/logger
<<
    /line_counter 0

    % constructor
    /init
    {
      % nothing to do since we only log to stdout
    }

    % logging function
    % expects one operand on stack to write to file
    /log
    {
      /value Set
      
      cout Rank <- ( ) <- value <- endl flush pop
    }

    % closes file
    /done
    {
    % nothing to do since we only log to stdout
    }

>> def

% ------------------------------------------------------------------------------------

RunSimulation

